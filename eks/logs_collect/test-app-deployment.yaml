apiVersion: v1
kind: Namespace
metadata:
  name: logs-collect
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-generator
  namespace: logs-collect
  labels:
    app: log-generator
spec:
  replicas: 2
  selector:
    matchLabels:
      app: log-generator
  template:
    metadata:
      labels:
        app: log-generator
    spec:
      containers:
      - name: log-generator
        image: nginx:alpine
        ports:
        - containerPort: 80
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: APP_NAME
          value: "log-generator"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: web-content
          mountPath: /usr/share/nginx/html
        - name: log-script
          mountPath: /usr/local/bin/log-generator.sh
          subPath: log-generator.sh
        command: ["/bin/sh"]
        args: ["-c", "chmod +x /usr/local/bin/log-generator.sh && /usr/local/bin/log-generator.sh & nginx -g 'daemon off;'"]
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: web-content
        configMap:
          name: web-content
      - name: log-script
        configMap:
          name: log-script
          defaultMode: 0755
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: logs-collect
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        
        log_format json_combined escape=json
        '{'
          '"timestamp":"$time_iso8601",'
          '"remote_addr":"$remote_addr",'
          '"remote_user":"$remote_user",'
          '"request":"$request",'
          '"status": "$status",'
          '"body_bytes_sent":"$body_bytes_sent",'
          '"request_time":"$request_time",'
          '"http_referrer":"$http_referer",'
          '"http_user_agent":"$http_user_agent",'
          '"app_name":"log-generator",'
          '"log_level":"info",'
          '"request_id":"req-$request_id"'
        '}';
        
        access_log /var/log/nginx/access.log json_combined;
        error_log /var/log/nginx/error.log warn;
        
        server {
            listen 80;
            server_name _;
            
            # 静态文件服务
            location / {
                root /usr/share/nginx/html;
                index index.html;
                try_files $uri $uri/ /index.html;
            }
            
            # API端点
            location /api/health {
                return 200 '{"status":"healthy","app":"log-generator","timestamp":"$time_iso8601"}';
                add_header Content-Type application/json;
                add_header Access-Control-Allow-Origin *;
            }
            
            location /api/trigger-log {
                access_log /var/log/nginx/access.log json_combined;
                return 200 '{"message":"Log triggered successfully","timestamp":"$time_iso8601","level":"info","request_id":"req-$request_id"}';
                add_header Content-Type application/json;
                add_header Access-Control-Allow-Origin *;
            }
            
            location /api/trigger-error {
                access_log /var/log/nginx/access.log json_combined;
                return 500 '{"message":"Simulated error occurred","timestamp":"$time_iso8601","level":"error","request_id":"req-$request_id"}';
                add_header Content-Type application/json;
                add_header Access-Control-Allow-Origin *;
            }
            
            location /api/trigger-warning {
                access_log /var/log/nginx/access.log json_combined;
                return 200 '{"message":"Warning condition detected","timestamp":"$time_iso8601","level":"warn","request_id":"req-$request_id"}';
                add_header Content-Type application/json;
                add_header Access-Control-Allow-Origin *;
            }
            
            location /api/bulk-logs {
                access_log /var/log/nginx/access.log json_combined;
                return 200 '{"message":"Bulk logs generated","timestamp":"$time_iso8601","level":"info","count":10,"request_id":"req-$request_id"}';
                add_header Content-Type application/json;
                add_header Access-Control-Allow-Origin *;
            }
            
            # 兼容旧端点
            location /health {
                return 200 '{"status":"healthy","app":"log-generator"}';
                add_header Content-Type application/json;
            }
            
            location /logs {
                return 200 '{"message":"Log endpoint accessed","timestamp":"$time_iso8601","level":"info"}';
                add_header Content-Type application/json;
            }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-content
  namespace: logs-collect
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>EKS 日志采集测试系统</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 15px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            
            .header {
                background: linear-gradient(135deg, #ff6b6b, #ee5a24);
                color: white;
                padding: 30px;
                text-align: center;
            }
            
            .header h1 {
                font-size: 2.5em;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            
            .header p {
                font-size: 1.2em;
                opacity: 0.9;
            }
            
            .content {
                padding: 40px;
            }
            
            .status-section {
                background: #f8f9fa;
                border-radius: 10px;
                padding: 25px;
                margin-bottom: 30px;
                border-left: 5px solid #28a745;
            }
            
            .status-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 15px;
                padding: 10px;
                background: white;
                border-radius: 8px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            }
            
            .status-item:last-child {
                margin-bottom: 0;
            }
            
            .status-label {
                font-weight: 600;
                color: #333;
            }
            
            .status-value {
                color: #28a745;
                font-weight: 500;
            }
            
            .controls-section {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }
            
            .control-card {
                background: white;
                border-radius: 10px;
                padding: 25px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.08);
                border: 1px solid #e9ecef;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            
            .control-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0,0,0,0.15);
            }
            
            .control-card h3 {
                color: #333;
                margin-bottom: 15px;
                font-size: 1.3em;
            }
            
            .control-card p {
                color: #666;
                margin-bottom: 20px;
                line-height: 1.5;
            }
            
            .btn {
                width: 100%;
                padding: 12px 20px;
                border: none;
                border-radius: 8px;
                font-size: 1em;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }
            
            .btn-success {
                background: linear-gradient(135deg, #28a745, #20c997);
                color: white;
            }
            
            .btn-warning {
                background: linear-gradient(135deg, #ffc107, #fd7e14);
                color: white;
            }
            
            .btn-danger {
                background: linear-gradient(135deg, #dc3545, #e83e8c);
                color: white;
            }
            
            .btn-info {
                background: linear-gradient(135deg, #17a2b8, #6f42c1);
                color: white;
            }
            
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            }
            
            .btn:active {
                transform: translateY(0);
            }
            
            .logs-section {
                background: #f8f9fa;
                border-radius: 10px;
                padding: 25px;
                margin-top: 30px;
            }
            
            .logs-section h3 {
                color: #333;
                margin-bottom: 20px;
                font-size: 1.5em;
            }
            
            .log-output {
                background: #2d3748;
                color: #e2e8f0;
                padding: 20px;
                border-radius: 8px;
                font-family: 'Courier New', monospace;
                font-size: 0.9em;
                max-height: 300px;
                overflow-y: auto;
                white-space: pre-wrap;
                line-height: 1.4;
            }
            
            .log-entry {
                margin-bottom: 8px;
                padding: 5px 0;
                border-bottom: 1px solid #4a5568;
            }
            
            .log-entry:last-child {
                border-bottom: none;
                margin-bottom: 0;
            }
            
            .timestamp {
                color: #90cdf4;
            }
            
            .log-level-info {
                color: #68d391;
            }
            
            .log-level-warn {
                color: #fbb040;
            }
            
            .log-level-error {
                color: #fc8181;
            }
            
            .clear-logs {
                margin-top: 15px;
                padding: 8px 16px;
                background: #4a5568;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 0.9em;
            }
            
            .clear-logs:hover {
                background: #2d3748;
            }
            
            .footer {
                background: #343a40;
                color: white;
                text-align: center;
                padding: 20px;
                font-size: 0.9em;
            }
            
            .loading {
                opacity: 0.6;
                pointer-events: none;
            }
            
            @keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.5; }
                100% { opacity: 1; }
            }
            
            .pulse {
                animation: pulse 1s infinite;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>🚀 EKS 日志采集测试系统</h1>
                <p>AWS EKS + OpenSearch + Fluent-bit 日志采集演示</p>
            </div>
            
            <div class="content">
                <div class="status-section">
                    <h3 style="margin-bottom: 20px; color: #333;">📊 系统状态</h3>
                    <div class="status-item">
                        <span class="status-label">应用状态</span>
                        <span class="status-value" id="app-status">检查中...</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">集群名称</span>
                        <span class="status-value">logs-collect-cluster</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">Kubernetes版本</span>
                        <span class="status-value">1.33</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">日志采集</span>
                        <span class="status-value">Fluent-bit</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">日志存储</span>
                        <span class="status-value">OpenSearch</span>
                    </div>
                </div>
                
                <div class="controls-section">
                    <div class="control-card">
                        <h3>✅ 正常日志</h3>
                        <p>触发一条INFO级别的正常日志，用于测试基本的日志采集功能。</p>
                        <button class="btn btn-success" onclick="triggerLog('info')">生成INFO日志</button>
                    </div>
                    
                    <div class="control-card">
                        <h3>⚠️ 警告日志</h3>
                        <p>触发一条WARN级别的警告日志，用于测试警告级别的日志处理。</p>
                        <button class="btn btn-warning" onclick="triggerLog('warn')">生成WARN日志</button>
                    </div>
                    
                    <div class="control-card">
                        <h3>❌ 错误日志</h3>
                        <p>触发一条ERROR级别的错误日志，用于测试错误处理和告警功能。</p>
                        <button class="btn btn-danger" onclick="triggerLog('error')">生成ERROR日志</button>
                    </div>
                    
                    <div class="control-card">
                        <h3>📦 批量日志</h3>
                        <p>一次性生成多条日志，用于测试高并发场景下的日志采集性能。</p>
                        <button class="btn btn-info" onclick="triggerBulkLogs()">生成批量日志</button>
                    </div>
                </div>
                
                <div class="logs-section">
                    <h3>📝 实时日志输出</h3>
                    <div class="log-output" id="log-output">
                        <div class="log-entry">
                            <span class="timestamp">[系统启动]</span> 
                            <span class="log-level-info">INFO</span> 
                            日志采集测试系统已启动，等待触发日志...
                        </div>
                    </div>
                    <button class="clear-logs" onclick="clearLogs()">清空日志</button>
                </div>
            </div>
            
            <div class="footer">
                <p>🏗️ AWS EKS 1.33 + OpenSearch + Fluent-bit | 日志采集演示系统</p>
                <p>Powered by Kubernetes & AWS</p>
            </div>
        </div>
        
        <script>
            let logCounter = 1;
            
            // 检查应用状态
            async function checkStatus() {
                try {
                    const response = await fetch('/api/health');
                    const data = await response.json();
                    document.getElementById('app-status').textContent = '🟢 运行正常';
                    document.getElementById('app-status').style.color = '#28a745';
                } catch (error) {
                    document.getElementById('app-status').textContent = '🔴 连接失败';
                    document.getElementById('app-status').style.color = '#dc3545';
                }
            }
            
            // 添加日志到输出区域
            function addLogEntry(level, message, response = null) {
                const logOutput = document.getElementById('log-output');
                const timestamp = new Date().toISOString();
                const logEntry = document.createElement('div');
                logEntry.className = 'log-entry';
                
                let levelClass = 'log-level-info';
                let levelIcon = 'ℹ️';
                
                switch(level) {
                    case 'warn':
                        levelClass = 'log-level-warn';
                        levelIcon = '⚠️';
                        break;
                    case 'error':
                        levelClass = 'log-level-error';
                        levelIcon = '❌';
                        break;
                    case 'info':
                    default:
                        levelClass = 'log-level-info';
                        levelIcon = '✅';
                        break;
                }
                
                let logContent = `<span class="timestamp">[${timestamp}]</span> <span class="${levelClass}">${levelIcon} ${level.toUpperCase()}</span> ${message}`;
                
                if (response) {
                    logContent += `\n    响应: ${JSON.stringify(response, null, 2)}`;
                }
                
                logEntry.innerHTML = logContent;
                logOutput.appendChild(logEntry);
                logOutput.scrollTop = logOutput.scrollHeight;
                
                logCounter++;
            }
            
            // 触发日志
            async function triggerLog(level) {
                const button = event.target;
                button.classList.add('loading', 'pulse');
                button.disabled = true;
                
                try {
                    let endpoint = '/api/trigger-log';
                    let message = `触发 ${level.toUpperCase()} 级别日志`;
                    
                    switch(level) {
                        case 'warn':
                            endpoint = '/api/trigger-warning';
                            message = '触发警告日志 - 检测到潜在问题';
                            break;
                        case 'error':
                            endpoint = '/api/trigger-error';
                            message = '触发错误日志 - 模拟系统错误';
                            break;
                        case 'info':
                        default:
                            endpoint = '/api/trigger-log';
                            message = '触发信息日志 - 正常操作记录';
                            break;
                    }
                    
                    const response = await fetch(endpoint);
                    const data = await response.json();
                    
                    addLogEntry(level, message, data);
                    
                    // 模拟额外的应用日志
                    setTimeout(() => {
                        addLogEntry('info', `日志已发送到 Fluent-bit 进行采集处理`);
                    }, 500);
                    
                } catch (error) {
                    addLogEntry('error', `请求失败: ${error.message}`);
                } finally {
                    button.classList.remove('loading', 'pulse');
                    button.disabled = false;
                }
            }
            
            // 触发批量日志
            async function triggerBulkLogs() {
                const button = event.target;
                button.classList.add('loading', 'pulse');
                button.disabled = true;
                
                try {
                    addLogEntry('info', '开始生成批量日志...');
                    
                    // 并发发送多个请求
                    const promises = [];
                    for (let i = 0; i < 5; i++) {
                        promises.push(fetch('/api/bulk-logs'));
                        promises.push(fetch('/api/trigger-log'));
                        promises.push(fetch('/api/trigger-warning'));
                    }
                    
                    const responses = await Promise.all(promises);
                    
                    addLogEntry('info', `批量日志生成完成 - 共发送 ${promises.length} 个请求`);
                    addLogEntry('info', '所有日志已提交到 Fluent-bit 队列');
                    
                } catch (error) {
                    addLogEntry('error', `批量日志生成失败: ${error.message}`);
                } finally {
                    button.classList.remove('loading', 'pulse');
                    button.disabled = false;
                }
            }
            
            // 清空日志
            function clearLogs() {
                const logOutput = document.getElementById('log-output');
                logOutput.innerHTML = `
                    <div class="log-entry">
                        <span class="timestamp">[${new Date().toISOString()}]</span> 
                        <span class="log-level-info">INFO</span> 
                        日志已清空，等待新的日志触发...
                    </div>
                `;
                logCounter = 1;
            }
            
            // 页面加载时检查状态
            window.onload = function() {
                checkStatus();
                
                // 每30秒检查一次状态
                setInterval(checkStatus, 30000);
                
                // 添加欢迎日志
                setTimeout(() => {
                    addLogEntry('info', '🎉 欢迎使用 EKS 日志采集测试系统！');
                    addLogEntry('info', '📡 系统已连接到 Fluent-bit 日志采集器');
                    addLogEntry('info', '🔍 日志将被发送到 OpenSearch 进行存储和分析');
                }, 1000);
            };
        </script>
    </body>
    </html>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: log-script
  namespace: logs-collect
data:
  log-generator.sh: |
    #!/bin/sh
    
    # 生成结构化日志的脚本
    while true; do
        # 生成不同级别的日志
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        LEVELS=("INFO" "WARN" "ERROR" "DEBUG")
        LEVEL=${LEVELS[$((RANDOM % 4))]}
        
        # 生成随机消息
        MESSAGES=(
            "User authentication successful"
            "Database connection established"
            "Processing user request"
            "Cache miss occurred"
            "API request completed"
            "Background job started"
            "Configuration loaded"
            "Health check performed"
            "Log collection system active"
            "Fluent-bit processing logs"
            "OpenSearch indexing data"
            "EKS cluster monitoring"
        )
        MESSAGE=${MESSAGES[$((RANDOM % 12))]}
        
        # 输出JSON格式日志
        echo "{\"timestamp\":\"$TIMESTAMP\",\"level\":\"$LEVEL\",\"app\":\"log-generator\",\"message\":\"$MESSAGE\",\"request_id\":\"req-$(date +%s)-$RANDOM\",\"user_id\":\"user-$((RANDOM % 1000))\",\"cluster\":\"logs-collect-cluster\",\"namespace\":\"logs-collect\"}"
        
        # 随机间隔 2-8 秒
        sleep $((2 + RANDOM % 7))
    done
---
apiVersion: v1
kind: Service
metadata:
  name: log-generator-service
  namespace: logs-collect
  labels:
    app: log-generator
spec:
  selector:
    app: log-generator
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
